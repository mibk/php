// Code generated by "stringer -type Type -linecomment"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Illegal-0]
	_ = x[EOF-1]
	_ = x[Whitespace-2]
	_ = x[Comment-3]
	_ = x[DocComment-4]
	_ = x[Ident-5]
	_ = x[Int-6]
	_ = x[Float-7]
	_ = x[String-8]
	_ = x[Var-9]
	_ = x[InlineHTML-10]
	_ = x[symbolStart-11]
	_ = x[OpenTag-12]
	_ = x[CloseTag-13]
	_ = x[Dollar-14]
	_ = x[Backslash-15]
	_ = x[Qmark-16]
	_ = x[Lparen-17]
	_ = x[Rparen-18]
	_ = x[Lbrack-19]
	_ = x[Rbrack-20]
	_ = x[Lbrace-21]
	_ = x[Rbrace-22]
	_ = x[Add-23]
	_ = x[Sub-24]
	_ = x[Mul-25]
	_ = x[Quo-26]
	_ = x[Rem-27]
	_ = x[Pow-28]
	_ = x[And-29]
	_ = x[Or-30]
	_ = x[Xor-31]
	_ = x[Shl-32]
	_ = x[Shr-33]
	_ = x[Concat-34]
	_ = x[Coalesce-35]
	_ = x[AddAssign-36]
	_ = x[SubAssign-37]
	_ = x[MulAssign-38]
	_ = x[QuoAssign-39]
	_ = x[RemAssign-40]
	_ = x[PowAssign-41]
	_ = x[AndAssign-42]
	_ = x[OrAssign-43]
	_ = x[XorAssign-44]
	_ = x[ShlAssign-45]
	_ = x[ShrAssign-46]
	_ = x[ConcatAssign-47]
	_ = x[CoalesceAssign-48]
	_ = x[Land-49]
	_ = x[Lor-50]
	_ = x[Inc-51]
	_ = x[Dec-52]
	_ = x[Assign-53]
	_ = x[Not-54]
	_ = x[Lt-55]
	_ = x[Gt-56]
	_ = x[Leq-57]
	_ = x[Geq-58]
	_ = x[Eq-59]
	_ = x[Neq-60]
	_ = x[Identical-61]
	_ = x[Nidentical-62]
	_ = x[Comma-63]
	_ = x[Colon-64]
	_ = x[DoubleColon-65]
	_ = x[Semicolon-66]
	_ = x[Ellipsis-67]
	_ = x[Arrow-68]
	_ = x[QmarkArrow-69]
	_ = x[DoubleArrow-70]
	_ = x[Spaceship-71]
	_ = x[symbolEnd-72]
	_ = x[keywordStart-73]
	_ = x[Abstract-74]
	_ = x[As-75]
	_ = x[Break-76]
	_ = x[Case-77]
	_ = x[Catch-78]
	_ = x[Class-79]
	_ = x[Clone-80]
	_ = x[Const-81]
	_ = x[Continue-82]
	_ = x[Declare-83]
	_ = x[Default-84]
	_ = x[Do-85]
	_ = x[Else-86]
	_ = x[Enum-87]
	_ = x[Extends-88]
	_ = x[Final-89]
	_ = x[Finally-90]
	_ = x[Fn-91]
	_ = x[For-92]
	_ = x[Foreach-93]
	_ = x[From-94]
	_ = x[Function-95]
	_ = x[Global-96]
	_ = x[Goto-97]
	_ = x[If-98]
	_ = x[Implements-99]
	_ = x[Instanceof-100]
	_ = x[Insteadof-101]
	_ = x[Interface-102]
	_ = x[Match-103]
	_ = x[Namespace-104]
	_ = x[New-105]
	_ = x[Private-106]
	_ = x[Protected-107]
	_ = x[Public-108]
	_ = x[Readonly-109]
	_ = x[Return-110]
	_ = x[Static-111]
	_ = x[Switch-112]
	_ = x[Throw-113]
	_ = x[Trait-114]
	_ = x[Try-115]
	_ = x[Use-116]
	_ = x[While-117]
	_ = x[Yield-118]
	_ = x[keywordEnd-119]
}

const _Type_name = "IllegalEOFWhitespaceCommentDocCommentIdentIntFloatStringVarInlineHTMLsymbolStart<?php?>$\\?()[]{}+-*/%**&|^<<>>.??+=-=*=/=%=**=&=|=^=<<=>>=.=??=&&||++--=!<><=>===!====!==,:::;...->?->=><=>symbolEndkeywordStartabstractasbreakcasecatchclasscloneconstcontinuedeclaredefaultdoelseenumextendsfinalfinallyfnforforeachfromfunctionglobalgotoifimplementsinstanceofinsteadofinterfacematchnamespacenewprivateprotectedpublicreadonlyreturnstaticswitchthrowtraittryusewhileyieldkeywordEnd"

var _Type_index = [...]uint16{0, 7, 10, 20, 27, 37, 42, 45, 50, 56, 59, 69, 80, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 113, 115, 117, 119, 121, 123, 126, 128, 130, 132, 135, 138, 140, 143, 145, 147, 149, 151, 152, 153, 154, 155, 157, 159, 161, 163, 166, 169, 170, 171, 173, 174, 177, 179, 182, 184, 187, 196, 208, 216, 218, 223, 227, 232, 237, 242, 247, 255, 262, 269, 271, 275, 279, 286, 291, 298, 300, 303, 310, 314, 322, 328, 332, 334, 344, 354, 363, 372, 377, 386, 389, 396, 405, 411, 419, 425, 431, 437, 442, 447, 450, 453, 458, 463, 473}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
